<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://v2raynodes.github.io/news/article-59292.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Android开发基础——Activity生命周期</title>
        <meta name="description" content="Activity的生命周期 返回栈 Android中的Acivity是可以层叠的，每启动一个新的Activity，就会覆盖在原Activity之上，然后点击back键就会销毁最上面的Activity，" />
        <link rel="icon" href="/assets/website/img/v2raynodes/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="V2rayNodes节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://v2raynodes.github.io/news/article-59292.htm" />
    <meta property="og:site_name" content="V2rayNodes节点订阅站" />
    <meta property="og:title" content="Android开发基础——Activity生命周期" />
    <meta property="og:image" content="https://v2raynodes.github.io/uploads/20240603/7fd04837464a7de57abd907f0d9a48b2.webp" />
        <meta property="og:release_date" content="2025-02-19T06:37:03" />
    <meta property="og:updated_time" content="2025-02-19T06:37:03" />
        <meta property="og:description" content="Activity的生命周期 返回栈 Android中的Acivity是可以层叠的，每启动一个新的Activity，就会覆盖在原Activity之上，然后点击back键就会销毁最上面的Activity，" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Android开发基础——Activity生命周期">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Dosis:300,400,500,,600,700,700i|Lato:300,300i,400,400i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/v2raynodes/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/v2raynodes/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/v2raynodes/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/v2raynodes/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/v2raynodes/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/v2raynodes/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Q31DFYB8XJ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Q31DFYB8XJ');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top">
        <div class="container d-flex align-items-center justify-content-between">
            <a href="/" class="logo">
                        <span>V2ray Nodes</span>
                        </a>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section id="breadcrumbs" class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1>Android开发基础——Activity生命周期</h1>
                </div>
                <div>
                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                </div>
            </div>
        </section><!-- End Breadcrumbs -->
        <!-- ======= About Section ======= -->
        <section id="about" class="about">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <h2>Activity的生命周期</h2> <h3>返回栈</h3> <p>Android中的Acivity是可以层叠的，每启动一个新的Activity，就会覆盖在原Activity之上，然后点击back键就会销毁最上面的Activity，下面的一个Activity就会重新显示出来。</p> <p>Android是使用任务(Task)来管理Activity的，一个任务就是一组存放在栈中的Activity的集合，该栈也称为返回栈(back stack)。栈是一种后进先出的数据结构，默认情况下，每当启动一个新的Activity，其就会在返回栈中入栈，并处于栈顶的位置，而每当按下back键或调用finish方法销毁一个Activity时，处于栈顶的Activity就会出栈，前一个入栈的Activity就会重新处于栈顶的位置。</p> <p>系统总是会显示处于栈顶的Activity给用户。</p> <h3>Activity状态</h3> <p>每个Activity在其生命周期中最多可能会有四种状态。</p> <ul> <li>运行状态：当一个Activity位于返回栈的栈顶时，Activity就处于运行状态。系统最不愿意回收的就是处于运行状态的Activity，因为会导致较差的用户体验。</li> <li>暂停状态：当一个Activity不再处于栈顶位置，但仍然可见时，Activity就进入了暂停状态。比如对话框形式的Activity处于运行状态时，其不会占用全部的屏幕空间，而处于暂停状态的Activity仍然是完全存活的，系统也不愿回收此类Activity，因为会导致较差的用户体验，只有在内存极低的情况下，系统才会考虑回收该类Activity。</li> <li>停止状态：当一个Activity不再处于栈顶位置，并且完全不可见时，就进入停止状态。系统仍然会为此类Activity保存相应的状态和成员变量，但是这并不是完全可靠的，当其它地方需要内存时，处于停止状态的Activity有可能会被系统回收。</li> <li>销毁状态：一个Activity从返回栈中移除后就变成了销毁状态。系统最倾向于回收处于此状态的Activity，以保证手机的内存充足。</li> </ul> <h3>Activity的生存期</h3> <p>Activity类定义了7个回调方法，覆盖了Activity生命周期的每一个环节：</p> <ul> <li>onCreate：在Activity第一次被创建的时候调用，用户应在该方法中完成Activity的初始化操作，比如加载布局，绑定事件等</li> <li>onStart：该方法在Activity由不可见变为可见时调用</li> <li>onResume：该方法在Activity准备好和用户进行交互的时候调用，此时Activity一定位于返回栈的栈顶，并且处于运行状态</li> <li>onPause：该方法在系统准备去启动或者恢复另一个Activity的时候调用。通常会在该方法中将一些消耗CPU的资源释放掉，以及保存一些关键数据，但该方法的执行速度要快，不然会影响新的栈顶Activity的使用</li> <li>onStop：该方法在Activity完全不可见时调用，其和onPause方法的主要区别在于，如果启动的新Activity是一个对话框式的Activity，那么onPause方法会执行，而onStop方法不会执行</li> <li>onDestroy：该方法在Activity被销毁之前调用，之后Activity的状态将变为销毁状态</li> <li>onRestart：该方法在Activity由停止状态变为运行状态之前调用，也就是Activity被重启了</li> </ul> <p>上面几个方法中，除了onRestart方法，其它都是成对的，从而又可以将Activity分为以下3中生存期：</p> <ul> <li>完整生存期：Activity在onCreate方法和onDestroy方法之间所经历的就是完整生存期，一般情况下，一个Activity会在onCreate方法中完成各种初始化操作，而在onDestroy方法中完成释放内存的操作&nbsp;</li> <li>可见生存期：Activity在onStart方法和onStop方法之间所经历的就是可见生存期。在可见生存期内，Activity对用户总是可见的，即便有可能无法和用户进行交互。用户可通过这两个方法合理管理对用户可见的资源。比如在onStart方法中对资源进行加载，在onStop方法中对资源进行释放，从而保证处于停止状态的Activity不会占用过多内存</li> <li>前台生存期：Activity在onResume方法和onPause方法之间经历的就是前台生存期。在前台生存期内，Activity总是处于运行状态，此时的Activity是可以和用户进行交互的</li> </ul> <p class="img-center"><img fetchpriority="high" decoding="async" alt="" height="668" src="http://img.555519.xyz/uploads/20230217/19c4305d0c9a151798d8aec4201508ac.jpg"></p> <h3>体验Activity的生命周期</h3> <p>这里新建一个项目，命名ActivityLifeCycleTest，并允许自动创建Activity和布局，然后再创建两个子Activity，分别命名为NormalActivity和DialogActivity。修改normal_layout为：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"     android:orientation="vertical"     android:layout_width="match_parent"     android:layout_height="match_parent"&gt;      &lt;TextView         android:layout_width="match_parent"         android:layout_height="wrap_content"         android:text="This is a normal activity"         /&gt;  &lt;/LinearLayout&gt;</code></pre> <p>修改dialog_layout为：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"     android:orientation="vertical"     android:layout_width="match_parent"     android:layout_height="match_parent"&gt;      &lt;TextView         android:layout_width="match_parent"         android:layout_height="wrap_content"         android:text="This is a dialog activity"         /&gt;  &lt;/LinearLayout&gt;</code></pre> <p>两个内容差不多，都是使用TextView显示一行文字。</p> <p>修改AndroidManifest.xml文件将DialogActivity配置为对话框式：</p> <pre><code class="language-XML">        &lt;activity             android:name=".DialogActivity"             android:exported="true"              android:theme="@style/Theme.AppCompat.Dialog" /&gt;         &lt;activity             android:name=".NormalActivity"             android:exported="true" /&gt;</code></pre> <p>上面使用android:theme属性指定了该Activity的主题。</p> <p>修改activity_main布局文件：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"     xmlns:tools="http://schemas.android.com/tools"     android:orientation="vertical"     android:layout_width="match_parent"     android:layout_height="match_parent"     tools:context=".MainActivity"&gt;      &lt;Button         android:id="@+id/startNormalActivity"         android:layout_width="match_parent"         android:layout_height="wrap_content"         android:text="Start NormalActivity"         tools:ignore="DuplicateIds" /&gt;     &lt;Button         android:id="@+id/startDialogActivity"         android:layout_width="match_parent"         android:layout_height="wrap_content"         android:text="Start DialogActivity"/&gt;           &lt;/LinearLayout&gt;</code></pre> <p>上面添加了两个按钮，一个用于启动NormalActivity，一个用于启动DialogActivity。</p> <p>最后修改MainActivity中的代码：</p> <pre><code class="language-Kotlin">package com.example.activitylifecycletest  import androidx.appcompat.app.AppCompatActivity import android.os.Bundle import android.util.Log import kotlinx.android.synthetic.main.activity_main.*  class MainActivity : AppCompatActivity() {      private val tag = "MainActivity"      override fun onCreate(savedInstanceState: Bundle?) {         super.onCreate(savedInstanceState)         Log.d(tag, "onCreate")         setContentView(R.layout.activity_main)         startNormalActivity.setOnClickListener {             val intent = Intent(this, NormalActivity::class.java)             startActivity(intent)         }         startDialogActivity.setOnClickListener {             val intent = Intent(this, DialogActivity::class.java)             startActivity(intent)         }     }      override fun onStart() {         super.onStart()         Log.d(tag, "onStart")     }      override fun onResume() {         super.onResume()         Log.d(tag, "onResume")     }      override fun onPause() {         super.onPause()         Log.d(tag, "onPause")     }      override fun onStop() {         super.onStop()         Log.d(tag, "onStop")     }      override fun onDestroy() {         super.onDestroy()         Log.d(tag, "onDestroy")     }      override fun onRestart() {         super.onRestart()         Log.d(tag, "onRestart")     } }</code></pre> <p>在onCreate方法中，分别为两个按钮注册了点击事件，点击第一个按钮会启动NormalActivity，点击第二个按钮会启动DialogActivity，然后覆写之前提到的几个方法。</p> <p>运行程序后的结果为：</p> <p class="img-center"><img decoding="async" alt="" height="613" src="http://img.555519.xyz/uploads/20230217/23dfd36494c72d0a181f1eaea9b62fea.jpg"></p> <p>&nbsp;对应出现的打印信息为：</p> <pre><code class="language-XML">2022-09-12 13:50:36.745 11707-11707/com.example.activitylifecycletest D/MainActivity: onCreate 2022-09-12 13:50:37.291 11707-11707/com.example.activitylifecycletest D/MainActivity: onStart 2022-09-12 13:50:37.295 11707-11707/com.example.activitylifecycletest D/MainActivity: onResume</code></pre> <p>&nbsp;可以看出，当MainActivity第一次被创建时会一次执行onCreate，onStart和onResume方法，然后点击第一个按钮，启动NormalActivity：</p> <p class="img-center"><img decoding="async" alt="" height="613" src="http://img.555519.xyz/uploads/20230217/cda23132254394448f561f91915696a6.jpg"></p> <p>&nbsp;此时打印信息为：</p> <pre><code class="language-XML">2022-09-12 13:52:34.493 11707-11707/com.example.activitylifecycletest D/MainActivity: onPause 2022-09-12 13:52:35.455 11707-11707/com.example.activitylifecycletest D/MainActivity: onStop</code></pre> <p>此时NormalActivity已经把MainActivity完全遮挡住，因此会执行onPause和onStop方法，然后按下Back键返回MainActivity，打印信息为：</p> <pre><code class="language-XML">2022-09-12 13:54:37.474 11707-11707/com.example.activitylifecycletest D/MainActivity: onRestart 2022-09-12 13:54:37.486 11707-11707/com.example.activitylifecycletest D/MainActivity: onStart 2022-09-12 13:54:37.488 11707-11707/com.example.activitylifecycletest D/MainActivity: onResume</code></pre> <p>由于之前MainActivity已经进入了停止状态，所以会执行onRestart犯法，然后会执行onStart和onResume方法。</p> <p>然后点击第二个按钮，启动DialogActivity：</p> <p class="img-center"><img loading="lazy" decoding="async" alt="" height="613" src="http://img.555519.xyz/uploads/20230217/b055ba2abadb85c9130620d6ef65e74f.jpg"></p> <p>&nbsp;此时打印信息为：</p> <pre><code class="language-XML">2022-09-12 13:56:23.189 11707-11707/com.example.activitylifecycletest D/MainActivity: onPause </code></pre> <p>可以看到，此时只执行了onPause方法，这是因为DialogActivity并没有完全遮挡主MainActivity，此时MainActivity进入了暂停状态，并没有进入停止状态。</p> <p>按下back后的打印信息为：</p> <pre><code class="language-XML">2022-09-12 13:59:24.829 11707-11707/com.example.activitylifecycletest D/MainActivity: onResume</code></pre> <p>此时也只有onResume方法执行，最后按back推出MainActivity后的打印信息为：</p> <pre><code class="language-XML">2022-09-12 14:00:22.132 11707-11707/com.example.activitylifecycletest D/MainActivity: onPause 2022-09-12 14:00:23.358 11707-11707/com.example.activitylifecycletest D/MainActivity: onStop 2022-09-12 14:00:23.377 11707-11707/com.example.activitylifecycletest D/MainActivity: onDestroy</code></pre> <p>依此会执行onPause，onStop和onDestroy方法，最终销毁MainActivity。</p> <h3>Activity被回收了怎么办</h3> <p>之前提到，当一个Activity进入了停止状态，是有可能被系统回收的。而假设存在这样的场景，应用中存在一个Activity A，用户在Activity A的基础之上启动了Activity B，A就进入了停止状态，而由于系统内存的问题，A被回收，此时用户按下back返回A，此时便会调用onCreate方法而不是onRestart方法，重新创建Activity A进行显示。</p> <p>上边这种情况看起来很合理，但是如果在Activity A中存在用户输入的信息或处理后的数据，那么此时回收Activity A后调用onCreate方法重建便会丢失这些内容，这是很影响用户体验的。</p> <p>而Activity中提供了一个onSaveInstanceState回调方法，该方法可以保证在Activity被回收前一定会被调用，因此可以使用该方法解决该问题。</p> <p>onSaveInstanceState方法会携带一个Bundle类型的参数，Bundle提供了一系列方法用于保存数据，比如putString/putInt，每个保存方法需要传入两个参数，第一个参数是键，用于后面从Bundle中取值，第二个参数是真正要保存的内容。</p> <p>在MainActivity中添加如下代码以保存临时数据：</p> <pre><code class="language-Kotlin">    override fun onSaveInstanceState(outState: Bundle) {         super.onSaveInstanceState(outState)         val tempData = "Something you just typed"         outState.putString("data_key", tempData)     }</code></pre> <p>数据保存后，需要在onCreate方法中恢复，该方法有一个Bundle类型的参数，该参数一般为null，但是如果在Activity被系统回收之前，通过onSaveInstanceState方法保存数据，该参数就会带有之前保存的全部数据，只是需要使用对应的取值方法获取数据即可。</p> <pre><code class="language-Kotlin">        if (savedInstanceState != null) {             val tempData = savedInstanceState.getString("data_key")             Log.d(tag, "tempData is $tempData")         }</code></pre> <p>拿到数据之后，进行对应的处理即可。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-58478.htm">动物防疫工作计划量化（动物疫病防控工作计划）</a></p>
                                        <p>下一个：<a href="/news/article-59293.htm">浅谈快速傅里叶变化的Matlab与Python实现与区别</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-46537.htm" title="动物疫苗未冷藏几小时失效（动物疫苗使用时的注意事项有哪些）">动物疫苗未冷藏几小时失效（动物疫苗使用时的注意事项有哪些）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-9-free-v2ray-subscribe.htm" title="「2月9日」最高速度19.9M/S，2025年Clash/Shadowrocket/V2ray/SSR每天更新免费机场订阅链接">「2月9日」最高速度19.9M/S，2025年Clash/Shadowrocket/V2ray/SSR每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-38600.htm" title="vue项目使用echarts（封装函数：监听dom元素尺寸变化resize echarts）">vue项目使用echarts（封装函数：监听dom元素尺寸变化resize echarts）</a></li>
                        <li class="py-2"><a href="/news/article-51596.htm" title="南京有领养宠物的地方吗最近在哪里（南京有领养宠物的地方吗最近在哪里呀）">南京有领养宠物的地方吗最近在哪里（南京有领养宠物的地方吗最近在哪里呀）</a></li>
                        <li class="py-2"><a href="/news/article-47018.htm" title="新手适合开的店（新手开什么店最好）">新手适合开的店（新手开什么店最好）</a></li>
                        <li class="py-2"><a href="/news/article-52125.htm" title="中牧股份宠物疫苗 中牧股份宠物疫苗怎么样">中牧股份宠物疫苗 中牧股份宠物疫苗怎么样</a></li>
                        <li class="py-2"><a href="/news/article-41564.htm" title="动物医院有什么科室啊（动物医院前景好吗）">动物医院有什么科室啊（动物医院前景好吗）</a></li>
                        <li class="py-2"><a href="/news/article-44035.htm" title="宠物粮龙头企业排名 宠物粮龙头企业排名前十">宠物粮龙头企业排名 宠物粮龙头企业排名前十</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-28-free-high-speed-nodes.htm" title="「2月28日」最高速度18.6M/S，2025年SSR/Clash/V2ray/Shadowrocket每天更新免费机场订阅链接">「2月28日」最高速度18.6M/S，2025年SSR/Clash/V2ray/Shadowrocket每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-65863.htm" title="办理动物医院需要什么手续和证件呢图片（办理动物医院需要什么手续和证件呢图片高清）">办理动物医院需要什么手续和证件呢图片（办理动物医院需要什么手续和证件呢图片高清）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container py-4">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <a href="/">V2rayNodes节点订阅站</a> 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/v2raynodes/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/v2raynodes/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/v2raynodes/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/v2raynodes/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/v2raynodes/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/v2raynodes/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/v2raynodes/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/v2raynodes/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>